webpackJsonp([20147626466865],{368:function(n,s){n.exports={data:{markdownRemark:{html:'<p>1. 什么是 Keras\nKeras 是基于 Theano 或 TensorFlow 的一个深度学习框架，它的设计参考了 Torch，用 Python 语言编写，是一个高度模块化的神经网络库，支持 GPU 和 CPU。</p>\n<p>安装 Keras\n使用 Keras 前还需要安装 Numpy、Scipy 等 Python 包，建议直接安装 Python 科学计算环境 Anaconda，一步到位。然后直接通过 pip install keras 安装 Keras 就可以了，非常的方便。</p>\n<p>在 Theano 和 TensorFlow 间切换\nKeras 的底层库使用 Theano 或 TensorFlow，这两个库也称为 Keras 的后端。无论是 Theano 还是 TensorFlow，都是一个“符号式”的库，这也使得 Keras 的编程与传统的 Python 代码有所差别。笼统的说，符号主义的计算首先定义各种变量，然后建立一个“计算图”，计算图规定了各个变量之间的计算关系。建立好的计算图需要编译以确定其内部细节，但是此时的计算图只是一个“空壳子”，里面没有任何实际的数据，只有当你把需要运算的输入放进去后，才能在整个模型中形成数据流，从而形成输出值。Keras 的模型搭建形式就是这种方法，搭建好的 Keras 模型只是一个空壳子，只有实际生成可调用的函数后（K.function），输入数据，才会形成真正的数据流。</p>\n<p>使用计算图的语言，如 Theano，以难以调试而闻名，当 Keras 的 Debug 进入 Theano 这个层次时，往往也令人头痛。但大多数的深度学习框架使用的都是符号计算这一套方法，因为符号计算能够提供关键的计算优化、自动求导等功能。</p>\n<p>Keras 会根据环境自动设置后端为 Theano 或 TensorFlow，我们也可以通过修改 Keras 配置文件来设置。Keras 配置文件位于用户目录下的 .keras 目录中，名称为 keras.json：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token punctuation">{</span>\n    <span class="token string">"epsilon"</span><span class="token punctuation">:</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">07</span><span class="token punctuation">,</span>\n    <span class="token string">"backend"</span><span class="token punctuation">:</span> <span class="token string">"tensorflow"</span><span class="token punctuation">,</span>\n    <span class="token string">"floatx"</span><span class="token punctuation">:</span> <span class="token string">"float32"</span><span class="token punctuation">,</span>\n    <span class="token string">"image_data_format"</span><span class="token punctuation">:</span> <span class="token string">"channels_last"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>其中 backend 字段设定 Keras 的后端，这里选择的是 tensorflow，也可以设定为 theano。</p>\n<p>data<em>format\n在如何表示一组彩色图片的问题上，Theano 和 TensorFlow 发生了分歧：Theano 会把 100 张 RGB 三通道的 16×32 彩色图表示为 (100,3,16,32)，第 0 维是样本维，代表样本的数目，第 1 维是通道维，代表颜色通道数，后面两个就是高和宽了，这种数据组织方法，称为 channels</em>first，即通道维靠前；而 TensorFlow 的表达形式是 (100,16,32,3)，即把通道维放在了最后，因而称为 channels_last。</p>\n<p>Keras 默认的数据组织形式也在配置文件 keras.json 中规定，由 image<em>data</em>format 一项设定，也可在代码中通过 K.image<em>data</em>format() 函数返回，请在网络的训练和测试中保持维度顺序一致。对 2D 数据来说，channels<em>last 设定维度顺序为 (rows,cols,channels) 而 channels</em>first 设定维度顺序为 (channels, rows, cols)。对 3D 数据而言，channels<em>last 设定为 (conv</em>dim1, conv<em>dim2, conv</em>dim3, channels)，而 channels<em>first 则是 (channels, conv</em>dim1, conv<em>dim2, conv</em>dim3)。</p>\n<ol start="2">\n<li>一些基本概念\n下面介绍几个使用 Keras 过程中经常会遇到的词汇：</li>\n</ol>\n<p>张量\n张量(tensor)可以看作是向量、矩阵的自然推广，用来表示广泛的数据类型。0 阶张量即标量，也就是一个数；1 阶张量就是一个向量；2 阶张量就是一个矩阵；3 阶张量可以称为一个立方体，具有 3 个颜色通道的彩色图片就是一个这样的立方体；把立方体摞起来就是 4 阶张量了，不同去想像 4 阶张量是什么样子，它就是个数学上的概念。</p>\n<p>张量的阶数有时候也称为维度，或者轴，轴这个词翻译自英文 axis。譬如一个矩阵 [[1,2],[3,4]]，是一个 2 阶张量，有两个维度或轴，沿着第 0 个轴（为了与 python 的计数方式一致，维度和轴从 0 算起）你看到的是 [1,2]，[3,4] 两个向量，沿着第 1 个轴你看到的是 [1,3]，[2,4] 两个向量。要理解“沿着某个轴”是什么意思，不妨试着运行一下下面的代码：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\na <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nsum0 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>\nsum1 <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span> sum0\n<span class="token keyword">print</span> sum1\n</code></pre>\n      </div>\n<p>函数式模型\n在 Keras 0.x 中有两种模型，一种是 Sequential 模型，又称为序贯模型，也就是单输入单输出，一条路通到底，层与层之间只有相邻关系，没有跨层连接。这种模型编译速度快，操作上也比较简单。第二种模型称为 Graph，即图模型，这个模型支持多输入多输出，层与层之间想怎么连怎么连，但是编译速度慢。可以看到，Sequential 其实是 Graph 的一个特殊情况。</p>\n<p>在 Keras 1 和 Keras 2 中，图模型被移除，从而增加了“functional model API”这个东西，更加强调了 Sequential 模型是特殊的一种。一般的模型就称为 Model。</p>\n<p>由于 functional model API 在使用时利用的是“函数式编程”的风格，这里将其称为函数式模型。总而言之，只要这个东西接收一个或一些张量作为输入，然后输出的也是一个或一些张量，但不管它是什么，统统都叫做“模型”。</p>\n<p>batch\n深度学习的优化算法，说白了就是梯度下降。每次的参数更新有两种方式。</p>\n<p>第一种，遍历全部数据集算一次损失函数，然后算函数对各个参数的梯度，更新梯度。这种方法每更新一次参数都要把数据集里的所有样本都看一遍，计算量开销大，计算速度慢，不支持在线学习，这称为批梯度下降(Batch gradient descent)。</p>\n<p>另一种，每看一个数据就算一下损失函数，然后求梯度更新参数，这个称为随机梯度下降(stochastic gradient descent)。这个方法速度比较快，但是收敛性能不太好，可能在最优点附近晃来晃去，达不到最优点。两次参数的更新也有可能互相抵消掉，造成目标函数震荡的比较剧烈。</p>\n<p>为了克服两种方法的缺点，现在一般采用的是一种折中手段，小批的梯度下降(mini-batch gradient decent)，这种方法把数据分为若干个批，按批来更新参数，这样，一个批中的一组数据共同决定了本次梯度的方向，下降起来就不容易跑偏，减少了随机性。另一方面因为批的样本数与整个数据集相比小了很多，所以计算量也不是很大。基本上现在的梯度下降都是基于 mini-batch 的，所以 Keras 的模块中经常会出现 batch_size，就是指这个。</p>\n<p>Keras 中用的优化器 SGD 是 stochastic gradient descent 的缩写，但不代表是一个样本就更新一回，而是基于 mini-batch 的。</p>\n<p>epochs\n简单说，epochs 指的就是训练过程中数据将被“轮询”多少次，就这样。</p>\n<ol start="3">\n<li>快速上手 Keras\nKeras 的核心数据结构是“模型”，模型是一种组织网络层的方式。Keras 中主要的模型是 Sequential 模型，Sequential 是一系列网络层按顺序构成的栈。你也可以查看函数式模型来学习建立更复杂的模型。</li>\n</ol>\n<p>Sequential 模型如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\n将一些网络层通过 <span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span> 堆叠起来，就构成了一个模型：\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation\n\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">"relu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">"softmax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n完成模型的搭建后，我们需要使用 <span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法来编译模型：\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span><span class="token string">\'sgd\'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n编译模型时必须指明损失函数和优化器，如果你需要的话，也可以自己定制损失函数。Keras 的一个核心理念就是简明易用同时，保证用户对 Keras 的绝对控制力度，用户可以根据自己的需要定制自己的模型、网络层，甚至修改源代码。例如，我们使用自定义的 SGD 优化器：\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n完成模型编译后，我们在训练数据上按 batch 进行一定次数的迭代来训练网络：\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n当然，我们也可以手动将一个个 batch 的数据送入网络中训练，这时候需要使用：\n\nmodel<span class="token punctuation">.</span>train_on_batch<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> y_batch<span class="token punctuation">)</span>\n随后，我们可以使用一行代码对我们的模型进行评估，看看模型的指标是否满足我们的要求：\n\nloss_and_metrics <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\n或者，我们可以使用我们的模型，对新的数据进行预测：\n\nclasses <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\n搭建一个问答系统、图像分类模型，或神经图灵机、word2vec 词嵌入器就是这么快。支撑深度学习的基本想法本就是简单的，现在让我们把它的实现也变的简单起来！\n\n为了更深入的了解 Keras，接下来我们介绍一下 Sequntial 模型和函数式模型的使用方法。\n</code></pre>\n      </div>\n<ol start="4">\n<li>\n<p>Sequntial 模型\n构建序贯(Sequential)模型\n序贯模型是多个网络层的线性堆叠，也就是“一条路走到黑”。可以通过向 Sequential 模型传递一个 layer 的 list 来构造该模型：</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Activation\n</code></pre>\n      </div>\n</li>\n</ol>\n<p>model = Sequential([\nDense(32, units=784),\nActivation(\'relu\'),\nDense(10),\nActivation(\'softmax\'),\n])\n也可以通过 .add() 方法一个个的将 layer 加入模型中：</p>\n<p>model = Sequential()\nmodel.add(Dense(32, input_shape=(784,)))\nmodel.add(Activation(\'relu\'))\n指定输入数据的 shape\n模型需要知道输入数据的 shape，因此，Sequential 模型的第一层需要接受一个关于输入数据 shape 的参数，后面的各个层则可以自动的推导出中间数据的 shape，因此不需要为每个层都指定这个参数。有几种方法来为第一层指定输入数据的 shape：</p>\n<p>传递一个 input<em>shape 的关键字参数给第一层，input</em>shape 是一个 tuple 类型的数据，其中也可以填入 None，如果填入 None 则表示此位置可能是任何正整数。数据的 batch 大小不应包含在其中。\n有些 2D 层，如 Dense，支持通过指定其输入维度 input<em>dim 来隐含的指定输入数据 shape。一些 3D 的时域层支持通过参数 input</em>dim 和 input<em>length 来指定输入shape。\n如果你需要为输入指定一个固定大小的 batch</em>size（常用于 stateful RNN 网络），可以传递 batch<em>size 参数到一个层中，例如你想指定输入张量的 batch 大小是 32，数据 shape 是 (6，8)，则你需要传递 batch</em>size=32 和 input<em>shape=(6,8)。\nmodel = Sequential()\nmodel.add(Dense(32, input</em>dim=784))\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=784))\n编译\n在训练模型之前，我们需要通过 compile 来对学习过程进行配置。compile 接收三个参数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>优化器 optimizer：该参数可指定为已预定义的优化器名，如 rmsprop、adagrad，或一个 Optimizer 类的对象。\n损失函数 loss：该参数为模型试图最小化的目标函数，它可为预定义的损失函数名，如categorical_crossentropy、mse，也可以为一个损失函数。\n指标列表 metrics：对分类问题，我们一般将该列表设置为 metrics=[\'accuracy\']。指标可以是一个预定义指标的名字,也可以是一个用户定制的函数。指标函数应该返回单个张量，或一个完成 metric_name - > metric_value 映射的字典。\n```python\n# 对于一个多分类问题\nmodel.compile(optimizer=\'rmsprop\',\n              loss=\'categorical_crossentropy\',\n              metrics=[\'accuracy\'])\n\n# 对于一个二分类问题\nmodel.compile(optimizer=\'rmsprop\',\n              loss=\'binary_crossentropy\',\n              metrics=[\'accuracy\'])\n\n# 对于一个均方误差回归问题\nmodel.compile(optimizer=\'rmsprop\',\n              loss=\'mse\')\n\n# 用户自定义指标列表\nimport keras.backend as K\n\ndef mean_pred(y_true, y_pred):\n    return K.mean(y_pred)\n\nmodel.compile(optimizer=\'rmsprop\',\n              loss=\'binary_crossentropy\',\n              metrics=[\'accuracy\', mean_pred])\n训练\nKeras以Numpy数组作为输入数据和标签的数据类型。训练模型一般使用 fit 函数。下面是一些例子：</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token comment"># 对于一个单输入模型的二分类问题</span>\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假数据</span>\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\ndata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nlabels <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 训练模型, 以每批次32样本迭代数据</span>\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n<span class="token comment"># 对于一个单输入模型的10分类问题</span>\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假数据</span>\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\ndata <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nlabels <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 将标签转换为one-hot表示</span>\none_hot_labels <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>labels<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 训练模型, 以每批次32样本迭代数据</span>\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> one_hot_labels<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n<span class="token number">5</span><span class="token punctuation">.</span> Sequntial 模型示例\n基于多层感知器的 softmax 多分类：\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout<span class="token punctuation">,</span> Activation\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD\n\n<span class="token comment"># 创建虚假数据</span>\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\nx_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_train <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\nx_test <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_test <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\n\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment"># Dense(64) 是一个含有64个隐单元的全连接层</span>\n<span class="token comment"># 在第一层，你必须指定预期的输入数据shape:</span>\n<span class="token comment"># 这里是一个20维的向量.</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nsgd <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span>sgd<span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>\n          epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>\n          batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\nscore <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\nMLP的二分类：\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout\n\n<span class="token comment"># 创建虚假数据</span>\nx_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nx_test <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_test <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>\n          epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>\n          batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\nscore <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>\n类似VGG的卷积神经网络：\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n<span class="token keyword">import</span> keras\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout<span class="token punctuation">,</span> Flatten\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> MaxPooling2D\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>optimizers <span class="token keyword">import</span> SGD\n\n<span class="token comment"># 创建虚假数据</span>\nx_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_train <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\nx_test <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_test <span class="token operator">=</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>to_categorical<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\n\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment"># 输入: 100x100的3通道图像 -> 张量 (100, 100, 3).</span>\n<span class="token comment"># 在每块3x3的区域应用32个卷积过滤器.</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nsgd <span class="token operator">=</span> SGD<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> decay<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> nesterov<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span> optimizer<span class="token operator">=</span>sgd<span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\nscore <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n使用LSTM的序列分类\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Embedding\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> LSTM\n\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Embedding<span class="token punctuation">(</span>max_features<span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\nscore <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>\n使用<span class="token number">1D</span>卷积的序列分类\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token punctuation">,</span> Dropout\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Embedding\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv1D<span class="token punctuation">,</span> GlobalAveragePooling1D<span class="token punctuation">,</span> MaxPooling1D\n\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>seq_length<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling1D<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv1D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>GlobalAveragePooling1D<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\nscore <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>\n用于序列分类的栈式LSTM\n在该模型中，我们将三个 LSTM 堆叠在一起，是该模型能够学习更高层次的时域特征表示。开始的两层 LSTM 返回其全部输出序列，而第三层 LSTM 只返回其输出序列的最后一步结果，从而其时域维度降低（即将输入序列转换为单个向量）<span class="token punctuation">:</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token number">1</span>\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> LSTM<span class="token punctuation">,</span> Dense\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n\ndata_dim <span class="token operator">=</span> <span class="token number">16</span>\ntimesteps <span class="token operator">=</span> <span class="token number">8</span>\nnum_classes <span class="token operator">=</span> <span class="token number">10</span>\n\n<span class="token comment"># 预期输入数据shape: (batch_size, timesteps, data_dim)</span>\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>\n               input_shape<span class="token operator">=</span><span class="token punctuation">(</span>timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个32维向量的序列</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个32维向量的序列</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 返回一个独立的32维的向量</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假的训练数据</span>\nx_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假的验证数据</span>\nx_val <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_val <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>\n          batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>\n          validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">)</span><span class="token punctuation">)</span>\n采用stateful LSTM的相同模型\nstateful LSTM 的特点是，在处理过一个 batch 的训练数据后，其内部状态（记忆）会被作为下一个 batch 的训练数据的初始状态。状态 LSTM 使得我们可以在合理的计算复杂度内处理较长序列：\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> LSTM<span class="token punctuation">,</span> Dense\n<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np\n\ndata_dim <span class="token operator">=</span> <span class="token number">16</span>\ntimesteps <span class="token operator">=</span> <span class="token number">8</span>\nnum_classes <span class="token operator">=</span> <span class="token number">10</span>\nbatch_size <span class="token operator">=</span> <span class="token number">32</span>\n\n<span class="token comment"># 预期输入批shape: (batch_size, timesteps, data_dim)</span>\n<span class="token comment"># 注意我们需要提供完整的 batch_input_shape 因为网络是有状态的.</span>\n<span class="token comment"># 第k批中的样本i跟踪第k-1批中的样本i.</span>\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>\n               batch_input_shape<span class="token operator">=</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> return_sequences<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> stateful<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span>\n              optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假的训练数据</span>\nx_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_train <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 创建虚假的验证数据</span>\nx_val <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> timesteps<span class="token punctuation">,</span> data_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>\ny_val <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span>\n          batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>\n          validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> y_val<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">6</span><span class="token punctuation">.</span> Functional 模型\n在 Keras <span class="token number">2</span> 里我们将 Functional 译为“函数式”，对函数式编程有所了解的同学应能够快速 get 到该类模型想要表达的含义。函数式模型称作 Functional，但它的类名是 Model，因此我们有时候也用 Model 来代表函数式模型。\n\nKeras 函数式模型接口是用户定义多输出模型、非循环有向模型或具有共享层的模型等复杂模型的途径。一句话，只要你的模型不是类似 VGG 一样一条路走到黑的模型，或者你的模型需要多于一个的输出，那么你总应该选择函数式模型。函数式模型是最广泛的一类模型，序贯模型<span class="token punctuation">(</span>Sequential<span class="token punctuation">)</span>只是它的一种特殊情况。\n\n让我们从简单一点的模型开始：\n\n第一个模型：全连接网络\nSequential 模型当然是实现全连接网络的最好方式，但我们从简单的全连接网络开始，有助于我们学习这部分的内容。在开始前，有几个概念需要澄清：\n\n层对象接受张量为参数，返回一个张量。\n输入是张量，输出也是张量的一个框架就是一个模型，通过 Model 定义。\n这样的模型可以被像 Keras 的 Sequential 一样被训练。\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Dense\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model\n\n<span class="token comment"># 这会返回一个张量</span>\ninputs <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 层对象接受张量为参数，返回一个张量</span>\nx <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>\nx <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\npredictions <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\n<span class="token comment"># 这会创建一个模型，包含输入层和三个Dense层</span>\nmodel <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>inputs<span class="token punctuation">,</span> outputs<span class="token operator">=</span>predictions<span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              loss<span class="token operator">=</span><span class="token string">\'categorical_crossentropy\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>data<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>  <span class="token comment"># 开始训练</span>\n所有的模型都是可调用的，就像层一样\n利用函数式模型的接口，我们可以很容易的重用已经训练好的模型：你可以把模型当作一个层一样，通过提供一个 tensor 来调用它。注意当你调用一个模型时，你不仅仅重用了它的结构，也重用了它的权重。\n\nx <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 这会返回我们之前定义的 10-way softmax.</span>\ny <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n这种方式可以允许你快速的创建能处理序列信号的模型，你可以很快将一个图像分类的模型变为一个对视频分类的模型，只需要一行代码：\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> TimeDistributed\n\n<span class="token comment"># 20个时间步序列的输入张量，每个包含一个784维的向量</span>\ninput_sequences <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 这会应用我们之前定义的模型到输入序列的每一个时间步</span>\n<span class="token comment"># 之前模型的输出是一个 10-way softmax,</span>\n<span class="token comment"># 所以下面这个层的输出会是一个含有20个10维向量的序列</span>\nprocessed_sequences <span class="token operator">=</span> TimeDistributed<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">(</span>input_sequences<span class="token punctuation">)</span>\n多输入和多输出模型\n使用函数式模型的一个典型场景是搭建多输入、多输出的模型。\n\n考虑这样一个模型。我们希望预测 Twitter 上一条新闻会被转发和点赞多少次。模型的主要输入是新闻本身，也就是一个词语的序列。但我们还可以拥有额外的输入，如新闻发布的日期等。这个模型的损失函数将由两部分组成，辅助的损失函数评估仅仅基于新闻本身做出预测的情况，主损失函数评估基于新闻和额外信息的预测的情况，即使来自主损失函数的梯度发生弥散，来自辅助损失函数的信息也能够训练 Embeddding 和 LSTM 层。在模型中早点使用主要的损失函数是对于深度网络的一个良好的正则方法。总而言之，该模型框图如下：\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token number">2</span>\n\n让我们用函数式模型来实现这个框图。\n\n主要的输入接收新闻本身，即一个整数的序列（每个整数编码了一个词）。这些整数位于 <span class="token number">1</span> 到 <span class="token number">10</span>，<span class="token number">000</span> 之间（即我们的字典有 <span class="token number">10</span>，<span class="token number">000</span> 个词）。这个序列有 <span class="token number">100</span> 个单词。\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Input<span class="token punctuation">,</span> Embedding<span class="token punctuation">,</span> LSTM<span class="token punctuation">,</span> Dense\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model\n\n<span class="token comment"># 标题输入: 接收一个100个整数的序列，每个整数处于1到10000之间.</span>\n<span class="token comment"># 注意我们可以通过"name"参数命名任何层.</span>\nmain_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">\'int32\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'main_input\'</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 这个embedding层会编码输入序列到一个512维的向量序列</span>\nx <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>output_dim<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> input_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">(</span>main_input<span class="token punctuation">)</span>\n\n<span class="token comment"># 一个LSTM会转化向量序列到一个单独的保存整个序列信息的向量</span>\nlstm_out <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n然后，我们插入一个额外的损失，使得即使在主损失很高的情况下，LSTM 和 Embedding 层也可以平滑的训练。\n\nauxiliary_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'aux_output\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>lstm_out<span class="token punctuation">)</span>\n再然后，我们将 LSTM 与额外的输入数据串联起来组成输入，送入模型中：\n\nauxiliary_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'aux_input\'</span><span class="token punctuation">)</span>\nx <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>lstm_out<span class="token punctuation">,</span> auxiliary_input<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 我们堆叠一个深度的全连接网络</span>\nx <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\nx <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\nx <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\n<span class="token comment"># 最后我们加上一个主要的logistic回归层</span>\nmain_output <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'main_output\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n最后，我们定义整个 <span class="token number">2</span> 输入，<span class="token number">2</span> 输出的模型：\n\nmodel <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>main_input<span class="token punctuation">,</span> auxiliary_input<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span><span class="token punctuation">[</span>main_output<span class="token punctuation">,</span> auxiliary_output<span class="token punctuation">]</span><span class="token punctuation">)</span>\n模型定义完毕，下一步编译模型。我们给额外的损失赋 <span class="token number">0.2</span> 的权重。我们可以通过关键字参数 loss_weights 或 loss 来为不同的输出设置不同的损失函数或权值。这两个参数均可为 Python 的列表或字典。这里我们给 loss 传递单个损失函数，这个损失函数会被应用于所有输出上。\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              loss_weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n编译完成后，我们通过传递训练数据和目标值训练该模型：\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>headline_data<span class="token punctuation">,</span> additional_data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>labels<span class="token punctuation">,</span> labels<span class="token punctuation">]</span><span class="token punctuation">,</span>\n          epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n因为我们输入和输出是被命名过的（在定义时传递了“name”参数），我们也可以用下面的方式编译和训练模型：\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              loss<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">\'main_output\'</span><span class="token punctuation">:</span> <span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span> <span class="token string">\'aux_output\'</span><span class="token punctuation">:</span> <span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n              loss_weights<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">\'main_output\'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">\'aux_output\'</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">\'main_input\'</span><span class="token punctuation">:</span> headline_data<span class="token punctuation">,</span> <span class="token string">\'aux_input\'</span><span class="token punctuation">:</span> additional_data<span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span><span class="token string">\'main_output\'</span><span class="token punctuation">:</span> labels<span class="token punctuation">,</span> <span class="token string">\'aux_output\'</span><span class="token punctuation">:</span> labels<span class="token punctuation">}</span><span class="token punctuation">,</span>\n          epochs<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>\n共享层\n另一个使用函数式模型的场合是使用共享层的时候。\n\n考虑微博数据，我们希望建立模型来判别两条微博是否是来自同一个用户，这个需求同样可以用来判断一个用户的两条微博的相似性。\n\n一种实现方式是，我们建立一个模型，它分别将两条微博的数据映射到两个特征向量上，然后将特征向量串联并加一个 logistic 回归层，输出它们来自同一个用户的概率。这种模型的训练数据是一对对的微博。\n\n因为这个问题是对称的，所以处理第一条微博的模型当然也能重用于处理第二条微博。所以这里我们使用一个共享的 LSTM 层来进行映射。\n\n首先，我们将微博的数据转为 <span class="token punctuation">(</span><span class="token number">140</span>，<span class="token number">256</span><span class="token punctuation">)</span> 的矩阵，即每条微博有 <span class="token number">140</span> 个字符，每个单词的特征由一个 <span class="token number">256</span> 维的词向量表示，向量的每个元素为 <span class="token number">1</span> 表示某个字符出现，为 <span class="token number">0</span> 表示不出现，这是一个 one<span class="token operator">-</span>hot 编码。\n\n之所以是 <span class="token punctuation">(</span><span class="token number">140</span>，<span class="token number">256</span><span class="token punctuation">)</span> 是因为一条微博最多有 <span class="token number">140</span> 个字符，而扩展的 ASCII 码表编码了常见的 <span class="token number">256</span> 个字符。\n\n注：原文中此处为 Tweet，所以对外国人而言这是合理的。如果考虑中文字符，那一个单词的词向量就不止 <span class="token number">256</span> 了。\n\n<span class="token keyword">import</span> keras\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Input<span class="token punctuation">,</span> LSTM<span class="token punctuation">,</span> Dense\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model\n\ntweet_a <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ntweet_b <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n若要对不同的输入共享同一层，就初始化该层一次，然后多次调用它：\n\n<span class="token comment"># 该层会输入一个矩阵然后返回一个大小为64的向量</span>\nshared_lstm <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 当我们重用相同层的实例很多次，并且层的权值也是重用的</span>\n<span class="token comment"># （这实际上完全是相同的层）</span>\nencoded_a <span class="token operator">=</span> shared_lstm<span class="token punctuation">(</span>tweet_a<span class="token punctuation">)</span>\nencoded_b <span class="token operator">=</span> shared_lstm<span class="token punctuation">(</span>tweet_b<span class="token punctuation">)</span>\n\n<span class="token comment"># 我们可以连接这两个向量:</span>\nmerged_vector <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>encoded_a<span class="token punctuation">,</span> encoded_b<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 然后在最上面添加一个logistic回归层</span>\npredictions <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>merged_vector<span class="token punctuation">)</span>\n\n<span class="token comment"># 我们定义了一个可训练的模型，将tweet的输入连接起来，输出预测</span>\nmodel <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>tweet_a<span class="token punctuation">,</span> tweet_b<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span>predictions<span class="token punctuation">)</span>\n\nmodel<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">\'rmsprop\'</span><span class="token punctuation">,</span>\n              loss<span class="token operator">=</span><span class="token string">\'binary_crossentropy\'</span><span class="token punctuation">,</span>\n              metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'accuracy\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">[</span>data_a<span class="token punctuation">,</span> data_b<span class="token punctuation">]</span><span class="token punctuation">,</span> labels<span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>\n层“节点”的概念\n无论何时，当你在某个输入上调用层时，你就创建了一个新的张量（即该层的输出），同时你也在为这个层增加一个“计算节点”。这个节点将输入张量映射为输出张量。当你多次调用该层时，这个层就有了多个节点，其下标分别为 <span class="token number">0</span>，<span class="token number">1</span>，<span class="token number">2</span>…\n\n在上一版本的 Keras 中，你可以通过 layer<span class="token punctuation">.</span>get_output<span class="token punctuation">(</span><span class="token punctuation">)</span> 方法来获得层的输出张量，或者通过 layer<span class="token punctuation">.</span>output_shape 获得其输出张量的 shape。这个版本的 Keras 你仍然可以这么做（除了 layer<span class="token punctuation">.</span>get_output<span class="token punctuation">(</span><span class="token punctuation">)</span> 被 output 替换）。但如果一个层与多个输入相连，会出现什么情况呢？\n\n如果层只与一个输入相连，那没有任何困惑的地方。<span class="token punctuation">.</span>output 将会返回该层唯一的输出：\n\na <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nlstm <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>\nencoded_a <span class="token operator">=</span> lstm<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\n<span class="token keyword">assert</span> lstm<span class="token punctuation">.</span>output <span class="token operator">==</span> encoded_a\n但当层与多个输入相连时，会出现问题：\n\na <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nb <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nlstm <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>\nencoded_a <span class="token operator">=</span> lstm<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\nencoded_b <span class="token operator">=</span> lstm<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n\nlstm<span class="token punctuation">.</span>output\n上面这段代码会报错：\n\n<span class="token operator">>></span> AssertionError<span class="token punctuation">:</span> Layer lstm_1 has multiple inbound nodes<span class="token punctuation">,</span>\nhence the notion of <span class="token string">"layer output"</span> <span class="token keyword">is</span> ill<span class="token operator">-</span>defined<span class="token punctuation">.</span>\nUse `get_output_at<span class="token punctuation">(</span>node_index<span class="token punctuation">)</span>` instead<span class="token punctuation">.</span>\n通过下面这种调用方式即可解决：\n\n<span class="token keyword">assert</span> lstm<span class="token punctuation">.</span>get_output_at<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> encoded_a\n<span class="token keyword">assert</span> lstm<span class="token punctuation">.</span>get_output_at<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> encoded_b\n对于 input_shape 和 output_shape 也是一样，如果一个层只有一个节点，或所有的节点都有相同的输入或输出 shape，那么 input_shape 和 output_shape 都是没有歧义的，并也只返回一个值。但是，例如你把一个相同的 Conv2D 应用于一个大小为 <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span> 的数据，然后又将其应用于一个 <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span> 的数据，那么此时该层就具有了多个输入和输出的 shape，你就需要显式的指定节点的下标，来表明你想取的是哪个了。\n\na <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nb <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\nconv <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">)</span>\nconved_a <span class="token operator">=</span> conv<span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token keyword">assert</span> conv<span class="token punctuation">.</span>input_shape <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>\n\nconved_b <span class="token operator">=</span> conv<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token keyword">assert</span> conv<span class="token punctuation">.</span>get_input_shape_at<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>\n<span class="token keyword">assert</span> conv<span class="token punctuation">.</span>get_input_shape_at<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>s\n<span class="token number">7</span><span class="token punctuation">.</span> Functional 模型示例\ninception模型\ninception的详细结构参见Google的这篇论文：Going Deeper <span class="token keyword">with</span> Convolutions\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> MaxPooling2D<span class="token punctuation">,</span> Input\n\ninput_img <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\ntower_1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input_img<span class="token punctuation">)</span>\ntower_1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tower_1<span class="token punctuation">)</span>\n\ntower_2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input_img<span class="token punctuation">)</span>\ntower_2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tower_2<span class="token punctuation">)</span>\n\ntower_3 <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>input_img<span class="token punctuation">)</span>\ntower_3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tower_3<span class="token punctuation">)</span>\n\noutput <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>tower_1<span class="token punctuation">,</span> tower_2<span class="token punctuation">,</span> tower_3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n卷积层的残差连接\n残差网络（Residual Network）的详细信息请参考这篇文章：Deep Residual Learning <span class="token keyword">for</span> Image Recognition\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> Input\n\n<span class="token comment"># 输入张量是一个3通道的256x256图像</span>\nx <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 3x3卷积，3输出通道 (与输入通道一样)</span>\ny <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token comment"># 返回 x + y.</span>\nz <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span>\n共享视觉模型\n该模型在两个输入上重用了图像处理的模型，用来判别两个 MNIST 数字是否是相同的数字\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> MaxPooling2D<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> Dense<span class="token punctuation">,</span> Flatten\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model\n\n<span class="token comment"># 首先定义视觉模型</span>\ndigit_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nx <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>digit_input<span class="token punctuation">)</span>\nx <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\nx <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\nout <span class="token operator">=</span> Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n\nvision_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>digit_input<span class="token punctuation">,</span> out<span class="token punctuation">)</span>\n\n<span class="token comment"># 然后定义tell-digits-apart模型</span>\ndigit_a <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\ndigit_b <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 共享视觉模型</span>\nout_a <span class="token operator">=</span> vision_model<span class="token punctuation">(</span>digit_a<span class="token punctuation">)</span>\nout_b <span class="token operator">=</span> vision_model<span class="token punctuation">(</span>digit_b<span class="token punctuation">)</span>\n\nconcatenated <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>out_a<span class="token punctuation">,</span> out_b<span class="token punctuation">]</span><span class="token punctuation">)</span>\nout <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'sigmoid\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>concatenated<span class="token punctuation">)</span>\n\nclassification_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">[</span>digit_a<span class="token punctuation">,</span> digit_b<span class="token punctuation">]</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span>\n视觉问答模型\n在针对一幅图片使用自然语言进行提问时，该模型能够提供关于该图片的一个单词的答案。\n\n这个模型将自然语言的问题和图片分别映射为特征向量，将二者合并后训练一个 logistic 回归层，从一系列可能的回答中挑选一个。\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> MaxPooling2D<span class="token punctuation">,</span> Flatten\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Input<span class="token punctuation">,</span> LSTM<span class="token punctuation">,</span> Embedding<span class="token punctuation">,</span> Dense\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model<span class="token punctuation">,</span> Sequential\n\n<span class="token comment"># 首先我们使用Sequential模型定义一个视觉模型</span>\n<span class="token comment"># 该模型会将一个图像编码成一个向量</span>\nvision_model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">\'same\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'relu\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nvision_model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 现在我们获得视觉模型的输出张量</span>\nimage_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nencoded_image <span class="token operator">=</span> vision_model<span class="token punctuation">(</span>image_input<span class="token punctuation">)</span>\n\n<span class="token comment"># 接下来，我们定义一个语言模型把问题编码成一个向量</span>\n<span class="token comment"># 每个问题最多包含100个词，并且每个词用从1到9999的整数表示</span>\nquestion_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">\'int32\'</span><span class="token punctuation">)</span>\nembedded_question <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> input_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">(</span>question_input<span class="token punctuation">)</span>\nencoded_question <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">(</span>embedded_question<span class="token punctuation">)</span>\n\n<span class="token comment"># 我们连接问题向量和图像向量</span>\nmerged <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>encoded_question<span class="token punctuation">,</span> encoded_image<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 然后我们在1000个可能的回答词语上训练一个logistic回归</span>\noutput <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span>\n\n<span class="token comment"># 这是我们最终的模型:</span>\nvqa_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>image_input<span class="token punctuation">,</span> question_input<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span>output<span class="token punctuation">)</span>\n\n<span class="token comment"># 下一阶段在真实的数据上训练这个模型</span>\n视频问答模型\n在做完图片问答模型后，我们可以快速将其转为视频问答的模型。在适当的训练下，你可以为模型提供一个短视频（如 <span class="token number">100</span> 帧）然后向模型提问一个关于该视频的问题，如“what sport <span class="token keyword">is</span> the boy playing？”<span class="token operator">-</span><span class="token operator">></span>“football”\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> TimeDistributed\n\nvideo_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment"># 通过之前已经训练好的 vision_model (权重重用)为视频编码</span>\nencoded_frame_sequence <span class="token operator">=</span> TimeDistributed<span class="token punctuation">(</span>vision_model<span class="token punctuation">)</span><span class="token punctuation">(</span>video_input<span class="token punctuation">)</span>  <span class="token comment"># 输出是一个向量的序列</span>\nencoded_video <span class="token operator">=</span> LSTM<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">(</span>encoded_frame_sequence<span class="token punctuation">)</span>  <span class="token comment"># 输出是一个向量</span>\n\n<span class="token comment"># 这是一个模型层面的对问题的编码器表示，使用与之前相同的权值</span>\nquestion_encoder <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>question_input<span class="token punctuation">,</span> outputs<span class="token operator">=</span>encoded_question<span class="token punctuation">)</span>\n\n<span class="token comment"># 使用编码器对问题进行编码</span>\nvideo_question_input <span class="token operator">=</span> Input<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">\'int32\'</span><span class="token punctuation">)</span>\nencoded_video_question <span class="token operator">=</span> question_encoder<span class="token punctuation">(</span>video_question_input<span class="token punctuation">)</span>\n\n<span class="token comment"># 这是我们的视频问题回答模型</span>\nmerged <span class="token operator">=</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>encoded_video<span class="token punctuation">,</span> encoded_video_question<span class="token punctuation">]</span><span class="token punctuation">)</span>\noutput <span class="token operator">=</span> Dense<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">\'softmax\'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span>\nvideo_qa_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">[</span>video_input<span class="token punctuation">,</span> video_question_input<span class="token punctuation">]</span><span class="token punctuation">,</span> outputs<span class="token operator">=</span>output<span class="token punctuation">)</span>\n<span class="token number">8</span><span class="token punctuation">.</span> 常见问题\n保存 Keras 模型\n一般我们不推荐使用 pickle 或 cPickle 来保存 Keras 模型。Keras 自己就提供了 model<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> 函数将模型和权重保存在一个 HDF5 文件中，该文件将包含：\n\n模型的结构，以便重构该模型\n模型的权重\n训练配置（损失函数，优化器等）\n优化器的状态，以便于从上次训练中断的地方开始\n使用 keras<span class="token punctuation">.</span>models<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span> 来重新实例化你的模型，如果文件中存储了训练配置的话，该函数还会同时完成模型的编译。\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> load_model\n\nmodel<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">\'my_model.h5\'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个HDF5文件\'my_model.h5\'</span>\n<span class="token keyword">del</span> model  <span class="token comment"># 删除已经存在的model</span>\n\n<span class="token comment"># 返回一个编译好的模型，与之前的完全相同</span>\nmodel <span class="token operator">=</span> load_model<span class="token punctuation">(</span><span class="token string">\'my_model.h5\'</span><span class="token punctuation">)</span>\n注意，在使用前需要确保你已安装了 HDF5 和其 Python 库 h5py\n\n如果你只是希望保存模型的结构，而不包含其权重或配置信息，可以使用：\n\n<span class="token comment"># 保存为JSON</span>\njson_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment"># 保存为YAML</span>\nyaml_string <span class="token operator">=</span> model<span class="token punctuation">.</span>to_yaml<span class="token punctuation">(</span><span class="token punctuation">)</span>\n这项操作将把模型序列化为 json 或 yaml 文件，这些文件对人而言也是友好的，如果需要的话你甚至可以手动打开这些文件并进行编辑。当然，你也可以从保存好的 json 文件或 yaml 文件中载入模型：\n\n<span class="token comment"># 通过JSON重建模型:</span>\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> model_from_json\nmodel <span class="token operator">=</span> model_from_json<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span>\n\n<span class="token comment"># 通过YAML重建模型</span>\nmodel <span class="token operator">=</span> model_from_yaml<span class="token punctuation">(</span>yaml_string<span class="token punctuation">)</span>\n如果需要保存模型的权重，可通过下面的代码利用 HDF5 进行保存。\n\nmodel<span class="token punctuation">.</span>save_weights<span class="token punctuation">(</span><span class="token string">\'my_model_weights.h5\'</span><span class="token punctuation">)</span>\n如果你需要在代码中初始化一个完全相同的模型，请使用：\n\nmodel<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span><span class="token string">\'my_model_weights.h5\'</span><span class="token punctuation">)</span>\n如果你需要加载权重到不同的网络结构（有些层一样）中，例如 fine<span class="token operator">-</span>tune 或 transfer<span class="token operator">-</span>learning，你可以通过层名字来加载模型：\n\nmodel<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span><span class="token string">\'my_model_weights.h5\'</span><span class="token punctuation">,</span> by_name<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n<span class="token triple-quoted-string string">"""\n假如原模型为：\n    model = Sequential()\n    model.add(Dense(2, input_dim=3, name="dense_1"))\n    model.add(Dense(3, name="dense_2"))\n    ...\n    model.save_weights(fname)\n"""</span>\n<span class="token comment"># 新模型</span>\nmodel <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> input_dim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"dense_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># will be loaded</span>\nmodel<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"new_dense"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># will not be loaded</span>\n\n<span class="token comment"># 从第一个模型加载权值; 只会影响第一层 dense_1.</span>\nmodel<span class="token punctuation">.</span>load_weights<span class="token punctuation">(</span>fname<span class="token punctuation">,</span> by_name<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n获取中间层的输出\n一种简单的方法是创建一个新的 Model，使得它的输出是你想要的那个输出：\n\n<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model\n\nmodel <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment"># 创建原模型</span>\n\nlayer_name <span class="token operator">=</span> <span class="token string">\'my_layer\'</span>\nintermediate_layer_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token operator">=</span>model<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">,</span>\n                                 output<span class="token operator">=</span>model<span class="token punctuation">.</span>get_layer<span class="token punctuation">(</span>layer_name<span class="token punctuation">)</span><span class="token punctuation">.</span>output<span class="token punctuation">)</span>\nintermediate_output <span class="token operator">=</span> intermediate_layer_model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n此外，我们也可以建立一个 Keras 的函数来达到这一目的：\n\n<span class="token keyword">from</span> keras <span class="token keyword">import</span> backend <span class="token keyword">as</span> K\n\n<span class="token comment"># Sequential模型</span>\nget_3rd_layer_output <span class="token operator">=</span> K<span class="token punctuation">.</span>function<span class="token punctuation">(</span><span class="token punctuation">[</span>model<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n                                  <span class="token punctuation">[</span>model<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>output<span class="token punctuation">]</span><span class="token punctuation">)</span>\nlayer_output <span class="token operator">=</span> get_3rd_layer_output<span class="token punctuation">(</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n在每个epoch后记录训练<span class="token operator">/</span>测试的loss和正确率\nmodel<span class="token punctuation">.</span>fit在运行结束后返回一个History对象，其中含有的history属性包含了训练过程中损失函数的值以及其他度量指标。\n\nhist <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> validation_split<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span>hist<span class="token punctuation">.</span>history<span class="token punctuation">)</span>\n</code></pre>\n      </div>'
},indexJson:{title:"Keras 快速上手指南（上）"}},pathContext:{slug:"/posts/9/",pid:9,next:"/posts/10",prev:"/posts/8"}}}});
//# sourceMappingURL=path---posts-9-b20d26b952031219dcce.js.map