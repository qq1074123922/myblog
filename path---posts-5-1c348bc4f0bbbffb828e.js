webpackJsonp([4876863402267],{364:function(n,s){n.exports={data:{markdownRemark:{html:'<blockquote>\n<p>上次构建Spark 任务发布管理程序时，正好用到了两个yarn的接口。因为不想引入Yarn的client包，所以使用了他的Http接口。那么如何调用这个HTTP接口便是一个问题了</p>\n</blockquote>\n<h2>Case描述</h2>\n<p>我现在要使用yarn的两个接口，一个是application 列表，一个是根据appId获取这个app的详情。对应的接口大约如此：</p>\n<blockquote>\n<p><a href="http://%5Bdns%5D/ws/v1/cluster/apps">http://[dns]/ws/v1/cluster/apps</a>\n<a href="http://%5Bdns%5D/ws/v1/cluster/apps/%7BappId%7D">http://[dns]/ws/v1/cluster/apps/{appId}</a></p>\n</blockquote>\n<h2>基于HttpClient的初级封装</h2>\n<p>基于HttpClient的一个典型封装如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HttpTransportService</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token function">post</span><span class="token punctuation">(</span>Url url<span class="token punctuation">,</span> Map data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token function">post</span><span class="token punctuation">(</span>Url url<span class="token punctuation">,</span> Map data<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token function">post</span><span class="token punctuation">(</span>final Url url<span class="token punctuation">,</span> final Map data<span class="token punctuation">,</span> final int timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token function">post</span><span class="token punctuation">(</span>final Url url<span class="token punctuation">,</span> final Map data<span class="token punctuation">,</span> final Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers<span class="token punctuation">,</span> final int timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token keyword">get</span><span class="token punctuation">(</span>final Url url<span class="token punctuation">,</span> final int timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token keyword">get</span><span class="token punctuation">(</span>Url url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token keyword">get</span><span class="token punctuation">(</span>Url url<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token keyword">get</span><span class="token punctuation">(</span>final Url url<span class="token punctuation">,</span> final Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> data<span class="token punctuation">,</span> final int timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> SResponse <span class="token function">put</span><span class="token punctuation">(</span>Url url<span class="token punctuation">,</span> Map data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>更详细的代码可以参看我以前的开源项目里的实现：<a href="https://github.com/allwefantasy/ServiceFramework/blob/master/src/main/java/net/csdn/modules/transport/DefaultHttpTransportService.java">HttpTransportService.java</a></p>\n<p>然而这种使用比较原始，不直观。</p>\n<p>大致使用方法如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>SResponse  response <span class="token operator">=</span> HttpTransportService<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Url</span><span class="token punctuation">(</span><span class="token string">"http://[dns]/ws/v1/cluster/apps/"</span><span class="token operator">+</span>appId<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getStatus<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">//parse result like JSONObject.parse(response.getContent())</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n<span class="token comment">//blabla</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>所以一般如果提供了HTTP 接口的项目都会给你一个SDK,方便你做调用，帮你屏蔽掉HTTP的细节。</p>\n<p>总体而言你有如下几种选择：</p>\n<ol>\n<li>直接使用上面的封装</li>\n<li>使用第三方SDK</li>\n<li>自己再做一些封装，转化为普通的方法调用</li>\n</ol>\n<p>第三种方案一般会是这样：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>def <span class="token function">app</span><span class="token punctuation">(</span>appName<span class="token punctuation">:</span>String<span class="token punctuation">)</span><span class="token punctuation">:</span>YarnApplication <span class="token operator">=</span> <span class="token punctuation">{</span>\n<span class="token comment">// 实现http接口请求解析逻辑</span>\n<span class="token punctuation">}</span> \n</code></pre>\n      </div>\n<p>虽然麻烦了些，但是调用者会比较幸福。</p>\n<h2>其实可以更简单</h2>\n<p>只要三步，就可以实现第三个方案：</p>\n<ol>\n<li>定义一个接口</li>\n<li>获取这个接口的引用</li>\n<li>尽情使用</li>\n</ol>\n<p>定义一个接口：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>trait <span class="token class-name">YarnController</span> <span class="token punctuation">{</span>\n\n  @<span class="token function">At</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">"/ws/v1/cluster/apps"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>RestRequest<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  def <span class="token function">apps</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"states"</span><span class="token punctuation">)</span> states<span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span>\n\n  @<span class="token function">At</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">"/ws/v1/cluster/apps/{appId}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>RestRequest<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  def <span class="token function">app</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"appId"</span><span class="token punctuation">)</span> appId<span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>At 注解定义了 path路径以及Action Method。 方法参数决定了传递的参数。</p>\n<p>对于同一个http接口，你也可以定义多个方法。比如，</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>trait <span class="token class-name">YarnController</span> <span class="token punctuation">{</span>\n\n  @<span class="token function">At</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">"/ws/v1/cluster/apps"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>RestRequest<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  def <span class="token function">apps</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"states"</span><span class="token punctuation">)</span> states<span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span>\n\n  @<span class="token function">At</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">"/ws/v1/cluster/apps"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>RestRequest<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  def <span class="token function">runningApps</span><span class="token punctuation">(</span>@<span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"states"</span><span class="token punctuation">)</span> states<span class="token punctuation">:</span> String<span class="token operator">=</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span>\n\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这样你直接调用runningApps 就可以拿到特定状态的应用，而无需传递参数。如果参数较多，你还可以指定哪些参数不传，哪些传。</p>\n<p>接着初始化 YarnController，获得对象的引用，代码如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>val yarnRestClient<span class="token punctuation">:</span> YarnController <span class="token operator">=</span> \nAggregateRestClient<span class="token punctuation">.</span>buildIfPresent<span class="token punctuation">[</span>YarnController<span class="token punctuation">]</span>\n<span class="token punctuation">(</span>hostAndPort<span class="token punctuation">,</span> \nfirstMeetProxyStrategy<span class="token punctuation">,</span> \nRestClient<span class="token punctuation">.</span>transportService<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<ul>\n<li>hostAndPort 是yarn的地址</li>\n<li>firstMeetProxyStrategy 指定如果后端有多个实例时的访问策略</li>\n<li>RestClient.transportService 就是我上面的最基础的封装HttpTransportService</li>\n</ul>\n<p>理论上后面两个参数可以不用传递</p>\n<p>这个时候你就可以直接使用获得的<code>YarnController</code>对象了。具体使用方式如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>val result:java.util.List[HttpTransportService.SResponse] = yarnRestClient.apps()  </code></pre>\n      </div>\n<p>上面就是你要做的所有工作，系统自动帮你实现了HTTP调用。</p>\n<h2>我希望返回结果是一个Bean</h2>\n<p>前面的放回结果是个List[SResponse]对象。我希望它是个Bean对象。所以我定义一个Bean类：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">class</span> <span class="token class-name">YarnApplication</span><span class="token punctuation">(</span>val id<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> user<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> queue<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> state<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> finalStatus<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> progress<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> trackingUI<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> trackingUrl<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> diagnostics<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> clusterId<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> applicationType<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> applicationTags<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> startedTime<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> finishedTime<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> elapsedTime<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> amContainerLogs<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> amHostHttpAddress<span class="token punctuation">:</span> String<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> allocatedMB<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> allocatedVCores<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> runningContainers<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> memorySeconds<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> vcoreSeconds<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> preemptedResourceMB<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> preemptedResourceVCores<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> numNonAMContainerPreempted<span class="token punctuation">:</span> Long<span class="token punctuation">,</span>\n                            <span class="token keyword">var</span> numAMContainerPreempted<span class="token punctuation">:</span> Long<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>然后引入一个隐式转换</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token keyword">import</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SReponseConvertor <span class="token punctuation">.</span>_\nval result<span class="token punctuation">:</span>Map<span class="token punctuation">[</span>Map<span class="token punctuation">[</span>String<span class="token punctuation">,</span>List<span class="token punctuation">[</span>YarnApplication<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span> yarnRestClient<span class="token punctuation">.</span><span class="token function">apps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">[</span>Map<span class="token punctuation">[</span>Map<span class="token punctuation">[</span>String<span class="token punctuation">,</span>List<span class="token punctuation">[</span>YarnApplication<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> \n\n<span class="token function">result</span><span class="token punctuation">(</span><span class="token string">"apps"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span> <span class="token comment">//这样就能拿到List[YarnApplication]</span>\n</code></pre>\n      </div>\n<p>SReponseConvertor 给List[SReponse]对象添加了一个新的extract 方法。当然前提是List[SReponse] 里是一个JSON格式的数据。</p>\n<p>因为yarn的接口返回的格式比较诡异，嵌套了两层，第一层是apps,第二层是app,第三层才是具体的List对象。所以有了上面的复杂形态。那我如何简化呢？每次调用都这么搞，太复杂了。</p>\n<p>那么自己实现一个隐式转换就行了，定义一个YarnControllerE类，</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>object YarnControllerE <span class="token punctuation">{</span>\n  implicit def <span class="token function">mapSResponseToObject</span><span class="token punctuation">(</span>response<span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> SResponseEnhance <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token class-name">SResponseEnhance</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConversions<span class="token punctuation">.</span>_\n\n<span class="token keyword">class</span> <span class="token class-name">SResponseEnhance</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>HttpTransportService<span class="token punctuation">.</span>SResponse<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">private</span> def extract<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>res<span class="token punctuation">:</span> String<span class="token punctuation">)</span><span class="token punctuation">(</span>implicit manifest<span class="token punctuation">:</span> Manifest<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> x<span class="token punctuation">.</span>isEmpty <span class="token operator">||</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getStatus <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>T<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    implicit val formats <span class="token operator">=</span> SJSon<span class="token punctuation">.</span>DefaultFormats\n    SJSon<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">[</span>T<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n\n\n  def <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> List<span class="token punctuation">[</span>YarnApplication<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    val item <span class="token operator">=</span> extract<span class="token punctuation">[</span>Map<span class="token punctuation">[</span>String<span class="token punctuation">,</span> Map<span class="token punctuation">[</span>String<span class="token punctuation">,</span> List<span class="token punctuation">[</span>YarnApplication<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getContent<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">item</span><span class="token punctuation">(</span><span class="token string">"apps"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>现在你可以很帅气这样调用了：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>import ..... YarnControllerE ._\nval result: List[YarnApplication] = yarnRestClient.apps().list</code></pre>\n      </div>\n<p>这样我们就可以像RPC一样访问一个HTTP接口了。</p>\n<h2>背后的机制</h2>\n<p>核心代码其实是这个：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code>val yarnRestClient<span class="token punctuation">:</span> YarnController <span class="token operator">=</span> \nAggregateRestClient<span class="token punctuation">.</span>buildIfPresent<span class="token punctuation">[</span>YarnController<span class="token punctuation">]</span>\n<span class="token punctuation">(</span>hostAndPort<span class="token punctuation">,</span> \nfirstMeetProxyStrategy<span class="token punctuation">,</span> \nRestClient<span class="token punctuation">.</span>transportService<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>AggregateRestClient 会帮你把YarnController 自动实现了。实现的机制很简单就是 JDK 的 Proxy机制。具体源码可以参看:<a href="https://github.com/allwefantasy/ServiceFramework/blob/master/src/main/java/net/csdn/modules/transport/proxy/AggrateRestClient.scala">AggrateRestClient.scala</a> 以及<a href="https://github.com/allwefantasy/ServiceFramework/blob/master/src/main/java/com/alibaba/dubbo/rpc/protocol/rest/RestClientProxy.java">RestClientProxy.java</a></p>'},indexJson:{title:"五分钟为HTTP接口提供Java-Scala-SDK"}},pathContext:{slug:"/posts/5/",pid:5,next:"/posts/6",prev:"/posts/4"}}}});
//# sourceMappingURL=path---posts-5-1c348bc4f0bbbffb828e.js.map