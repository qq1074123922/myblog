webpackJsonp([91246642375014],{358:function(n,s){n.exports={data:{markdownRemark:{html:'<h2>目标</h2>\n<p>根据昨天的URL上报数据生成ALS模型。之后将模型加载到流式计算中，对实时URL的访问用户进行内容推荐。整个流程只需要你写写SQL（做解析），弄弄配置就搞定。</p>\n<h2>资源准备</h2>\n<ul>\n<li>下载 <a href="http://spark.apache.org/downloads.html">spark 1.6</a></li>\n<li>\n<p>下载 StreamingPro 算法版</p>\n<blockquote>\n<p>链接:  <a href="http://share.weiyun.com/7c4b806011dc4e03d39279eafae916d7">http://share.weiyun.com/7c4b806011dc4e03d39279eafae916d7</a></p>\n</blockquote>\n</li>\n</ul>\n<h2>模型训练</h2>\n<p> 首先我们拷贝一份配置文件  <a href="https://gist.github.com/allwefantasy/2170f67c9e1e453604e2e76923ee65dc">als-training</a>，我在配置文件里模拟了一些数据，假设是一些URL，大体如下，表示itemId 为2的文章被userId=1的用户访问了。</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>http://123.com/path?userId=1&itemId=2</code></pre>\n      </div>\n<p>之后的SQL就是抽取出userid 和itemId，然后得到一个包含label, features 的表。在StreamingPro中，所有的的算法的输入都会遵循这个规范。对于ALS算法而言，label 表示userId, features则是userId,ItemId,rating 三个按逗号拼接的字符串。对于回归类算法，则是逗号拼接的数字。</p>\n<p>最后通过组件AlgorithmOutputCompositor 完成模型训练。</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"streaming.core.compositor.spark.output.AlgorithmOutputCompositor"</span><span class="token punctuation">,</span>\n        <span class="token string">"params"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"/tmp/als_log"</span><span class="token punctuation">,</span>\n            <span class="token string">"algorithm"</span><span class="token punctuation">:</span> <span class="token string">"als"</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">{</span>\n            <span class="token string">"rank"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n            <span class="token string">"alpha"</span><span class="token punctuation">:</span> <span class="token number">1.0</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>path表示输出路径。 algorithm 表示算法。目前只支持 als,lr(线性回归),lr2（逻辑回归）三种算法。后续会不断添加。</p>\n<p>第二组参数则是对应算法的一些配置参数。你可以配置多组，算法自动回选择最优的一组参数得到模型，并且保存到对应的path路径下。</p>\n<p>你可以直接运行得到结果：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>./bin/spark-submit   \\\n--class streaming.core.StreamingApp \\\n--master local[2] \\\n/tmp/streamingpro-0.3.2-SNAPSHOT-online-mllib-1.6.1.jar  \\\n-streaming.name test \\\n-streaming.platform spark  \\\n-streaming.job.file.path file://tmp/strategy.v2.json </code></pre>\n      </div>\n<h2>推荐预测</h2>\n<p>接着我们要给指定的用户进行推荐。参看 <a href="https://gist.github.com/allwefantasy/c0d3cf678356515e35cf6d4e0529038b">als-predict</a>。</p>\n<p>解析出用户的逻辑是和上面的是一样的。里面的核心模块是：</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code><span class="token punctuation">{</span>\n        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"streaming.core.compositor.spark.transformation.AlgorithmCompositor"</span><span class="token punctuation">,</span>\n        <span class="token string">"params"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n          <span class="token punctuation">{</span>\n            <span class="token string">"path"</span><span class="token punctuation">:</span> <span class="token string">"file:///tmp/als_log"</span><span class="token punctuation">,</span>\n            <span class="token string">"algorithm"</span><span class="token punctuation">:</span> <span class="token string">"als"</span><span class="token punctuation">,</span>\n            <span class="token string">"outputTableName"</span><span class="token punctuation">:</span> <span class="token string">"test4"</span><span class="token punctuation">,</span>\n            <span class="token string">"recommendUsersForProductsNum"</span><span class="token punctuation">:</span> <span class="token number">1</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>path 是模型文件所在的位置。recommendUsersForProductsNum 表示对每个用户推荐多少内容。outputTableName是输出的表，\n方便后续继续操作，比如存储到Redis或者数据库中，方便前端程序做调用。</p>\n<p>大家讲上面的运行脚本里的配置文件路径调整下，就可以运行起来，看到运行结果，比如我这里的结果是：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>+----+----+--------------------+\n|user|item|             ratings|\n+----+----+--------------------+\n|   3|   2|[[2,3,0.900332472...|\n|   2|   3|[[2,2,0.900333589...|\n|   2|   2|[[2,2,0.900333589...|\n+----+----+--------------------+</code></pre>\n      </div>\n<p>你可以输入到任何你感兴趣的系统中，StreamingPro目前支持ES,Parquet等Spark已经支持的格式作为输出。</p>\n<h2>在流式计算中进行数据推荐</h2>\n<p>参看 <a href="https://gist.github.com/allwefantasy/fc8280006f466ddc860c842ac8abf2c0">als-streaming-predict</a>,将所有的包名前缀从</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>streaming.core.compositor.spark\n转换为\nstreaming.core.compositor.spark.streaming</code></pre>\n      </div>\n<p>即可支持流式。运行脚本如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>./bin/spark-submit   \\\n--class streaming.core.StreamingApp \\\n--name "join"  \\\n--master local[2] \\\n/tmp/streamingpro-0.3.2-SNAPSHOT-online-mllib-1.6.1.jar  \\\n-streaming.name test \\\n-streaming.job.file.path file://tmp/strategy.v2.json </code></pre>\n      </div>\n<h2>总结</h2>\n<p>在StreamingPro中，一个算法的模型训练，仅仅被看做一个特殊的存储。我们完全可以将对应的AlgothrimOutputCompositor换成 其他的输出源。</p>\n<p>而对于数据的预测，我们仅仅是把它看做一个数据Transformer，根据进来的数据，新生成一个prediction字段。</p>\n<p>无论是模型训练还是预测，都是基于SQL流来完成的，完美的融入到了数据的流程当中。</p>\n<h2>附录</h2>\n<p>感兴趣实现的，可以参考 <a href="https://github.com/allwefantasy/streamingpro/tree/mllib/src/main/java/org/apache/spark/ml">代码</a></p>'},indexJson:{title:"无编码利用协同算法实现个性化推荐"}},pathContext:{slug:"/posts/1/",pid:1,next:"/posts/2",prev:null}}}});
//# sourceMappingURL=path---posts-1-90166e225d03eda6390c.js.map